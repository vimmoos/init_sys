
#+PROPERTY: header-args:emacs-lisp :tangle ~/init.el :mkdirp yes

* Utils
#+NAME: dot-file-name
#+begin_src emacs-lisp
  buffer-file-name
#+end_src

#+begin_src emacs-lisp
(push "~/emacs_config" load-path)
#+end_src

* Package Manager
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")
                           ("melpa-stable" . "http://stable.melpa.org/packages/")))


  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  (column-number-mode)
  ;; (global-display-line-numbers-mode t)

  ;; interesting package which display the pressed keybindings with associated function
  ;; (use-package command-log-mode)
#+end_src

* Package Update
#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))
#+end_src

* Basic Gui
The first time you load this configuration on a new machine, you'll
need to run the following command interactively so that mode line icons
display correctly:
=M-x all-the-icons-install-fonts=
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq visible-bell t)

  (defun disable-modes (modes)
    (dolist (m modes)
      (funcall m -1)))

  (disable-modes '(scroll-bar-mode
                   tool-bar-mode
                   tooltip-mode
                   menu-bar-mode))
  ;; Give some breathing room
  (set-fringe-mode 10)

  (add-to-list 'default-frame-alist '(font . "Fira Code Retina-11"))

  ;; (set-face-attribute 'default nil :font "Fira Code Retina")
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (show-paren-mode t)

  (defalias 'yes-or-no-p 'y-or-n-p)

  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 10)))

  (use-package doom-themes
    :init (load-theme 'doom-gruvbox t))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))

  ;; (use-package golden-ratio
  ;;   ;; :init (setq golden-ratio-auto-scale t)
  ;;   :config
  ;;   (golden-ratio-mode t))
#+end_src

* Backup Files
TODO maybe create some custom behavior instead of just this!
#+begin_src emacs-lisp
  (setq make-backup-files nil)
#+end_src

* Ivy
#+begin_src emacs-lisp
  (use-package ivy
      :diminish
      :bind (("C-s" . swiper)
             :map ivy-minibuffer-map
             ("TAB" . ivy-alt-done)
             ("C-l" . ivy-alt-done)
             ("C-j" . ivy-next-line)
             ("C-k" . ivy-previous-line)
             :map ivy-switch-buffer-map
             ("C-k" . ivy-previous-line)
             ("C-l" . ivy-done)
             ("C-d" . ivy-switch-buffer-kill)
             :map ivy-reverse-i-search-map
             ("C-k" . ivy-previous-line)
             ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1))

  (use-package ivy-rich
      :init
      (ivy-rich-mode 1))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    (prescient-persist-mode t);; persistent across sessions
    (ivy-prescient-mode t))
#+end_src

* Utils
#+begin_src emacs-lisp

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

* Transients
#+begin_src emacs-lisp
  (use-package hydra)

;; Example of how to create a transient mode
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))
#+end_src

* Evil
#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-undo-system 'undo-fu)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

* Projectile
#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))
#+end_src

* Magit
#+begin_src emacs-lisp

(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

* Org Mode
** Utils
#+begin_src emacs-lisp
  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1))

  (defun efs/org-font-setup ()
    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.0)
                    (org-level-6 . 1.0)
                    (org-level-7 . 1.0)
                    (org-level-8 . 1.0)))
      (set-face-attribute (car face) nil :font "Fira Code Retina" :height (cdr face))))
#+end_src

** Org package
#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . efs/org-mode-setup)
    :config
    (efs/org-font-setup)
    :custom
    (org-ellipsis " ▾")
    (org-log-done t)
    (org-todo-keywords '((sequence "TODO" "INPROGRESS" "HOLD" "|" "DISCARDED"  "DONE" )))
    (org-todo-keyword-faces
     '(("DISCARDED" . org-done)
       ("DONE" . org-done)
       ("INPROGRESS" . (:foreground "orange" :weight bold)))))
  ;;(define-key org-mode-map (kbd "M-}") nil)
  ;;(define-key org-mode-map (kbd "M-{") nil)
  ;;(evil-define-key 'normal 'org-mode-map (kbd "}") 'org-forward-paragraph)
  ;;(evil-define-key 'normal 'org-mode-map (kbd "{") 'org-backward-paragraph)

  (add-hook 'org-mode-hook 'auto-fill-mode)
#+end_src


** Fancify Org
#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (defun vimmoos/visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . vimmoos/visual-fill))
#+end_src

** Org Babel
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))

  ;;(require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" ."src shell"))
  (add-to-list 'org-structure-template-alist '("py" ."src python"))
  (add-to-list 'org-structure-template-alist '("el" ."src emacs-lisp"))

#+end_src


** Auto-tangle
#+begin_src emacs-lisp :noweb yes
  (defun vimmoos/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        "<<dot-file-name()>>")
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'after-save-hook #'vimmoos/org-babel-tangle-config)))
#+end_src

* PDF tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :hook (pdf-view-mode . pdf-view-midnight-minor-mode)
    :config
    ;; (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-width)
    (setq pdf-annot-activate-created-annotations t)
    (define-key pdf-view-mode-map (kbd "C-l") 'image-scroll-left)
    (define-key pdf-view-mode-map (kbd "C-h") 'image-scroll-right)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))

  ;;(define-key org-mode-map (kbd "M-}") nil)
  (require 'pdf-view)

  (add-to-list 'auto-mode-alist '("\\.pdf" . pdf-view-mode))

  (with-eval-after-load 'pdf-view
    (add-hook 'pdf-view-mode-hook 'auto-revert-mode)
    (add-hook 'pdf-view-mode-hook (lambda ()
                                    (blink-cursor-mode -1))))
  (use-package pdf-view-restore
    :after pdf-tools
    :config
    (add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode)
    (setq pdf-view-restore-filename "~/.emacs.d/.pdf-view-restore"))
#+end_src

* EAF
follow this link to understand what it is and how to install it
however it seems a bit too much [[https://github.com/emacs-eaf/emacs-application-framework][emacs-application-framework]]
#+begin_src emacs-lisp
  ;; (use-package eaf
  ;;   :load-path "~/.emacs.d/site-lisp/emacs-application-framework")
#+end_src

** Browser
#+begin_src emacs-lisp
  ;; (use-package eaf-browser
  ;;   :load-path "~/.emacs.d/site-lisp/emacs-application-framework")
#+end_src

** System monitor
#+begin_src emacs-lisp
  ;; (use-package eaf-system-monitor
  ;;   :load-path "~/.emacs.d/site-lisp/emacs-application-framework")
#+end_src

* Lsp
** Setup
#+begin_src emacs-lisp
  ;; (defun vimmoos/lsp-mode-setup ()
  ;;   (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  ;;   (lsp-headerline-breadcrumb-mode))
#+end_src

** Lsp configuration
#+begin_src emacs-lisp
  ;; (use-package lsp-mode
  ;;   :commands (lsp lsp-deferred)
  ;;   :hook ((lsp-mode . vimmoos/lsp-mode-setup)
  ;;          (prog-mode-hook . lsp)
  ;;          (lsp-mode . lsp-enable-which-key-integration))
  ;;   :bind (:map lsp-mode-map
  ;;         ("<tab>" . company-indent-or-complete-common))
  ;;   :init
  ;;   (setq lsp-keymap-prefix "C-c l"))
#+end_src

** Lsp UI
maybe too much
customize it and it can be helpful! https://emacs-lsp.github.io/lsp-ui/#lsp-ui-imenu
#+begin_src emacs-lisp
  ;; (use-package lsp-ui
  ;;   :hook (lsp-mode . lsp-ui-mode)
  ;;   :custom
  ;;   (lsp-ui-doc-position 'bottom))
#+end_src

** Lsp + ivy
lsp-ivy-workspace-symbol - Search for a symbol name in the current project workspace
lsp-ivy-global-workspace-symbol - Search for a symbol name in all active project workspaces
    #+begin_src emacs-lisp
      ;; (use-package lsp-ivy
      ;;   :after lsp)
    #+end_src

** Lsp + grammarly
note is based on the unofficial-grammarly-language-server
so keep track on whether the [[https://github.com/emacs-grammarly/lsp-grammarly][git]] is maintained!
lsp-grammarly seems to be quite unstable at the moment!
#+begin_src emacs-lisp
  ;; (use-package keytar
  ;;   :config
  ;;   (keytar-install))

  ;; (use-package lsp-grammarly)
    ;; :hook (text-mode . (lambda ()
    ;;                      (require 'lsp-grammarly)
    ;;                      (lsp))))  ; or lsp-deferred
#+end_src

* Company
#+begin_src emacs-lisp
  (use-package company
    :hook (lsp-mode . company-mode)
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection))
    :custom
    (global-company-mode t)
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

  (use-package company-prescient
    :after company
    :config
    (company-prescient-mode t))

#+end_src

* Programming Misc
Problem = open and close also quotes in lispy modes such as org probably due to smartparens
Note maybe add paredit ?
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook (lambda ()
                              (setq show-trailing-whitespace t)))

  (use-package aggressive-indent
    :hook (prog-mode-hook . aggressive-indent-mode))

  (use-package smartparens
    :config
    (smartparens-global-mode t))
  (use-package paredit)

  (use-package format-all)
  (use-package evil-nerd-commenter)
  (use-package undo-fu)
  (use-package markdown-mode)
  (use-package dockerfile-mode)
  (use-package yaml-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src
* R
#+begin_src emacs-lisp
  (use-package ess
    :hook ((ess-mode . format-all-mode)))

  (use-package poly-R
    :ensure t)
#+end_src
* Python
#+begin_src emacs-lisp

  (use-package anaconda-mode )

  (use-package elpy)
  (elpy-enable)
  (use-package python-black)

  (use-package python-mode
    :hook ((python-mode . anaconda-mode)
           (python-mode . elpy-mode)
           (python-mode . python-black-on-save-mode)
           (python-mode . anaconda-eldoc-mode)))

  (use-package pyvenv
    :after python-mode
    :config (pyvenv-mode 1))

  (setenv "WORKON_HOME" "~/venvs/")


#+end_src
* IPython
#+begin_src  emacs-lisp

      (defun vimmoos/ein-set-faces ()
        (dolist (face '((ein:codecell-input-area-face . "#3c3836")
                        (ein:codecell-input-prompt-face . "dark gray")

                        (ein:markdowncell-input-area-face . "#3c3836")
                        (ein:markdowncell-input-prompt-face . "dark gray")
                        (ein:cell-output-area . "black")))
         (set-face-attribute (car face)  nil :background (cdr face))))

      (require 'ein)
      (require 'ein-notebook)
      (add-hook 'ein:notebook-mode-hook #'vimmoos/visual-fill)
      (add-hook 'ein:notebook-mode-hook #'vimmoos/ein-set-faces)



#+end_src

* R
#+begin_src emacs-lisp
  (use-package ess
    :hook (ess-mode . lsp-deferred))

  (use-package csv-mode)
#+end_src

* Clojure
TODO
#+begin_src emacs-lisp
(use-package clojure-mode)
(use-package cider)
#+end_src

* Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    ;; for further config look at:
    ;; https://github.com/emacs-dashboard/emacs-dashboard
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))
          dashboard-banner-logo-title "Welcome back!"
          dashboard-startup-banner 'logo
          dashboard-center-content t
          dashboard-set-navigator t))

#+end_src

* Compilation Buffer
#+begin_src emacs-lisp
(require 'ansi-color)

;; for compilation buffers
(defun vimmoos/colorize-compilation-buffer ()
  (toggle-read-only)
  (ansi-color-apply-on-region (point-min) (point-max))
  (toggle-read-only))

(add-hook 'compilation-filter-hook 'vimmoos/colorize-compilation-buffer nil 'local)

#+end_src

* Workgroups (session manager)
This create session and restore between emacs restarts.
The default prefix is "C-c z"
for more info follow this [[https://github.com/pashinin/workgroups2][link]]
#+begin_src emacs-lisp
  (use-package workgroups2)
#+end_src

* Key Bindings
** Misc
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (defun todofun ()
    (interactive)
    (message "TODO functionality"))
#+end_src

** General
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer vimmoos/leader-keys
      :states '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    )
#+end_src


** Leaders
#+begin_src emacs-lisp
  (vimmoos/leader-keys
    "t"   '(:ignore t :which-key "toggles")
    "d"   '(:ignore t :which-key "deleter")
    "e"   '(:ignore t :which-key "ein mode")
    "f"   '(:ignore t :which-key "files")
    "w"   '(:ignore t :which-key "windows")
    "g"   '(:ignore t :which-key "magit")
    "b"   '(:ignore t :which-key "buffers")
    "q"   '(:ignore t :which-key "quitter")
    "SPC" '(counsel-M-x :which-key "counsel M-x")
    ";"   '(evilnc-comment-or-uncomment-lines :which-key "comment region")
    "TAB" '(evil-switch-to-windows-last-buffer :which-key "previous buffer"))
#+end_src

** Buffers
#+begin_src emacs-lisp
  (vimmoos/leader-keys
    :infix "b"
    "d" '(kill-current-buffer :which-key "kill buffer")
    "b" '(counsel-ibuffer :which-key "switch buffer"))
#+end_src

** Magit
#+begin_src emacs-lisp
  (vimmoos/leader-keys
    :infix "g"
    "s" '(magit-status :which-key "status"))
#+end_src

** Files

#+begin_src emacs-lisp :noweb yes
  (defun open-dot-file ()
    (interactive)
    (find-file "<<dot-file-name()>>"))
#+end_src

#+begin_src emacs-lisp
  (vimmoos/leader-keys
    :infix "f"
    "s" '(save-buffer :which-key "save file")
    "f" '(counsel-find-file :which-key "find file")
    "ed" '(open-dot-file :which-key "open emacs conf file"))
#+end_src

** Windows
#+begin_src emacs-lisp
  (vimmoos/leader-keys
    :infix "w"
    "s" '(split-window-vertically :which-key "split vertically")
    "v" '(split-window-horizontally :which-key "split horizontally")
    "d" '(delete-window :which-key "delete window")
    "h" '(evil-window-left :which-key "move to the left")
    "j"'(evil-window-up :which-key "move to the down")
    "k"'(evil-window-down :which-key "move to the up")
    "l" '(evil-window-right :which-key "move to the right"))
#+end_src

** Deleter
#+begin_src emacs-lisp
  (vimmoos/leader-keys
    :infix "d"
    "s" '(kill-sexp :which-key "kill sexp"))
#+end_src

** Quitter
#+begin_src emacs-lisp
  (vimmoos/leader-keys
      :infix "q"
      "z" '(delete-frame :which-key "kill frame")
      "q" '(kill-emacs :which-key "kill emacs"))
#+end_src

** Toggler
#+begin_src emacs-lisp
  (vimmoos/leader-keys
    :infix "t"
    "t" '(counsel-load-theme :which-key "choose theme")
    "s" '(hydra-text-scale/body :which-key "scale text"))
#+end_src

** Ein (jupyter)
#+begin_src emacs-lisp
  (unbind-key (kbd "<escape>") ein:notebook-mode-map)

  ;; (unbind-key (kbd "C-<return>") ein:notebook-mode-map)
  (define-key ein:notebook-mode-map (kbd "C-<return>") (lambda ()
                                                         (interactive)
                                                         (ein:worksheet-execute-cell-km)
                                                         (ein:worksheet-goto-next-input-km)))


  (vimmoos/leader-keys
    :infix "e"
    "o" '(ein:process-find-file-callback :which-key "open an ipynb file in ein")
    "a" '(ein:worksheet-execute-all-cells :which-key "execute all cells")
    "i" '(ein:worksheet-insert-cell-below-km :which-keys "insert cell below")
    "p" '(ein:worksheet-insert-cell-above-km :which-keys "insert cell above")
    "c" '(ein:worksheet-change-cell-type-km :which-keys "change cell type")
    "k" '(ein:worksheet-kill-cell-km :which-keys "kill cell")
    "s" '(ein:stop :which-keys "stop server")
    "d" '(ein:notebook-close-km :which-keys "close notebook"))

  (vimmoos/leader-keys
   :infix "f"
   :keymaps 'ein:notebook-mode-map
   "s" '(ein:notebook-save-notebook-command-km :which-key "save file"))
#+end_src

* TODOS
+ check why in visual mode there is no }  only in =org=!!
  #+begin_src emacs-lisp


    ;; (define-key emacs-lisp-mode-map (kbd "<M-return>") 'eval-last-sexp)
  #+end_src

#+begin_src emacs-lisp
  ;; (shell-command-to-string
  ;;  "$SHELL --login -c 'echo $PATH'")
#+end_src

** Features
EXWM
grammarly? ispell

** Packages
 *search on web* -> wait for EXWM
 =kill ring=
 smudge -> wait for EXWM

 awesome-tab -> no so usefull
 [[https://github.com/bbatsov/crux][crux]]
 [[https://github.com/lassik/emacs-format-all-the-code][format-all]]
